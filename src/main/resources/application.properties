#ANS 서버 패스.
server.servlet.context-path=/api

#토큰 sercret key.
jwt.auth.secret-key=gemiso

#gemiso ans interface [SHA-256].
security-Key=6523969673f0d1e3e6fb5f3a4957226428481dadfbce7ba045a67d8186ab0457

#nam 도메인주소
nam.url.key=https://nam.arirang.com/
nam.url.injest.key=https://nam.arirang.com/api/ans/v2/register-wire

#arirang password salt key
password.salt.key=gdigdg23lymfsibf7qv9njkgk

#json 파싱때 필드가 없는 클래스를 Serialize문제 설정
spring.jackson.serialization.FAIL_ON_EMPTY_BEANS=false

# 콘솔 창에 출력되는 로깅 메세지를 색으로 구분해서 출력.
spring.output.ansi.enabled=always
# 로그 메세지가 저장되는 로그 디렉터리.
logging.file.path=/data/app/ans/server/storage/logs
# logging.level.{패키지 경로}를 통해 로깅 레벨을 결정할 수 있슴.
logging.level.gil.toy.medihealth=info
# hibernate에서 생성하는 SQL 로그 끄기 JPA사용중 JPA log옵션은 꺼야 중복으로 나오지 않는다.
logging.level.org.hibernate.SQL=off
#max-history 설정 안하면 디폴트가 30이라 30일 이후의 로그는 자동 삭제된다. 필수로 해야함.
logging.logback.rollingpolicy.max-history=300
logging.logback.rollingpolicy.max-file-size=100MB
logging.logback.rollingpolicy.file-name-pattern=${LOG_FILE}.%d{yyyy-MM-dd}-%i.log
#  로그 패턴 설정
#logging.pattern.console=%-5level %d{yyyy-MM-dd HH:mm:ss}[%thread] [%F - %M] [%logger{0}:%line] - %msg%n
#logging.pattern.file= %-5level %d{yyyy-MM-dd HH:mm:ss}[%thread] [%F - %M] [%logger{0}:%line] - %msg%n


#Topic routingKey
topic.routing-key=ans


server.error.include-binding-errors=always
server.error.include-message=always
server.error.include-stacktrace=on_param

#톰캣 thread 설정
server.tomcat.threads.max=200
server.tomcat.threads.min-spare=10
server.tomcat.accept-count=100


#방송아이콘 이미지 Url.
files.url-key=http://ans.arirang.com/resource/
#files.url-key=http://dev-ans.arirang.com/resource/

#엘라스틱 인덱스 확인해 이자식아 정신차려!!
#엘라스틱서치 포트키 [개발]
#elasticsearch-port-key=172.20.10.42:9200
#엘라스틱서치 포트키 [운영]
elasticsearch-port-key=172.20.10.39:9200

#아리랑 개발서버 DB[ 아리랑 개발서버  localhost ]
spring.datasource.main.driver-class-name=org.postgresql.Driver
spring.datasource.main.jdbc-url=jdbc:postgresql://localhost:5432/ansdb
spring.datasource.main.username=ans
spring.datasource.main.password=ans123!@#
main.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
main.hibernate.hbm2ddl.auto=none
#아리랑 개발서버 DB[ 아리랑 개발서버  172.20.10.44/ansdb , 172.20.10.151/ans_mig_db ]
#spring.datasource.main.driver-class-name=org.postgresql.Driver
#spring.datasource.main.jdbc-url=jdbc:postgresql://172.20.10.150:5432/ansdb
#spring.datasource.main.username=ans
#spring.datasource.main.password=ans123!@#
#main.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
#main.hibernate.hbm2ddl.auto=none
#아리랑 개발서버 DB[로컬]
#spring.datasource.hikari.main.driver-class-name=org.postgresql.Driver
#spring.datasource.hikari.main.jdbc-url=jdbc:postgresql://10.100.13.65:5432/ansdb
#spring.datasource.hikari.main.username=ans
#spring.datasource.hikari.main.password=g3m1n1-ans@
#spring.datasource.hikari.main.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
#spring.datasource.hikari.main.hibernate.hbm2ddl.auto=update
#아리랑 개발서버 DB[로컬]
#spring.datasource.driver-class-name=org.postgresql.Driver
#spring.datasource.url=jdbc:postgresql://10.100.13.65:5432/ansdb
#spring.datasource.username=ans
#spring.datasource.password=ans
#제미소서버 DB [마이그레이션 데이터 확인]
#spring.datasource.hikari.main.driver-class-name=org.postgresql.Driver
#spring.datasource.hikari.main.jdbc-url=jdbc:postgresql://geminisoft.iptime.org:6432/ansdb
#spring.datasource.hikari.main.username=ans
#spring.datasource.hikari.main.password=g3m1n1-ans@
#spring.datasource.hikari.main.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
#spring.datasource.hikari.main.hibernate.hbm2ddl.auto=none
#Mis DB[ 부서, 사용자 ]
#spring.datasource.type=org.apache.tomcat.jdbc.pool.DataSource
spring.datasource.sub.driver-class-name=oracle.jdbc.OracleDriver
spring.datasource.sub.jdbc-url=jdbc:oracle:thin:@172.20.20.70:1527/ORA19
spring.datasource.sub.username=USER_VI
spring.datasource.sub.password=user_vi`1qazxc
sub.hibernate.dialect=org.hibernate.dialect.Oracle8iDialect
sub.hibernate.hbm2ddl.auto=none

# postgresql를 위한 Tomcat DBCP를 사용하기 위한 설정
#spring.postgresql.datasource.type=org.apache.tomcat.jdbc.pool.DataSource

spring.jpa.generate-ddl=false
#spring.jpa.hibernate.ddl-auto=update
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.show-sql=true

#Spring Data Elasticsearch가 제대로 동작하는지 확인
logging.level.org.springframework.data.elasticsearch.client.WIRE=TRACE

spring.mvc.throw-exception-if-no-handler-found=true
spring.web.resources.add-mappings=false
spring.mvc.hiddenmethod.filter.enabled=true

#빌드 메모리 설정
#org.gradle.daemon=true
#org.gradle.configureondemand=true
#org.gradle.jvmargs=-Xmx4g -XX:MaxPermSize=2048m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8
